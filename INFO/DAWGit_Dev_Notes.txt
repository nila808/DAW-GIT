🧠 DAW Git — Developer Reference Notes

🔗 Manual Test Plan Access
To view your persistent manual test plan table of contents:

    	show test plan
	export test plan as markdown	    
	show manual test toc

	fix patch paste = app
	new commit message = ncm
	show test table.


To export:
    export test plan as markdown
    export test plan as pdf

🧼 Chat Context Cleanup Command
Use this to reset and start clean tracking:

    assume clean handover, all prior fixes done, and track any new features added from this point



------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------

// To run the end-to-end test from your canvas file and all other tests in your DAW Git App test suite from the terminal, use this command from the project root:
pytest tests_dawgit/


// If you only want to run the single full workflow test:
pytest tests_dawgit/test_full_user_session_flow.py


------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------


🚀 Launching the App

From bundled launch script:

./launch_daw_git.sh



In development mode (manual Python execution):
    cd ~/Projects/DAWGitApp
    source daw-git-env/bin/activate
    python daw_git_gui.py

🧪 Run the Test Suite

./run_tests.sh


Option 1: 🧹 Temporarily Unset DAWGIT_FORCE_TEST_PATH
Run this in your terminal before running tests:


unset DAWGIT_FORCE_TEST_PATH
./run_tests.sh

E.G. 

./run_tests.sh -k test_no_path_selection_resets_project



This removes the override and allows each test to create its own clean temp folder.

------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------


🧾 App Metadata
- App Name:
    DAW Git

- Script Type (Python Binary):
    /Users/niccavendish/Projects/DAWGitApp/daw-git-env/bin/python

- Script Path:
    /Users/niccavendish/Projects/DAWGitApp/daw_git_gui.py

📁 Note for This File
This document is used as a persistent .txt reference. You can update it anytime or retrieve it in chat with:

    show dev notes

------------------------------------------------------------------------------------------------------------------------
push-it
------------------------------------------------------------------------------------------------------------------------

It now:

🧪 Runs your full test suite

🔄 Updates PROJECT_STATUS.md

📝 Appends to CHANGELOG.md

📁 Updates PROJECT_MARKER.json

🛣️ Creates/updates ROADMAP.md

📥 Stages all of the above via:

python
Copy
Edit
os.system("git add PROJECT_STATUS.md CHANGELOG.md PROJECT_MARKER.json ROADMAP.md")
✅ Commits

📤 Pushes to your branch

🏷️ Tags the release

📚 Logs the version to release.log



To run only the last failed tests in your terminal using pytest, use:

pytest --last-failed --tb=short


You can also add -q for even more compact output:
pytest --last-failed --tb=short -q









------------------------------------------------------------------------------------------------------------------------







------------------------------------------------------------------------------------------------------------------------
✅ Copy & Paste This into a New Chat:        push-ctx 
------------------------------------------------------------------------------------------------------------------------

Hi ChatGPT, please load the full context of my previous project called **DAW Git App** (aka StudioGit). It includes:

- A PyQt6-based GUI for version control of DAW projects (Ableton Live, Logic Pro)
- Git and Git LFS integration with snapshot/branch/commit logic
- Full UI with:
  - commit log viewer
  - branch dropdown
  - status label showing session state
  - role tagging system (Main Mix, Creative Take, etc.)
- Key safety features:
  - warnings for detached HEAD states
  - protection against commits with no .als or .logicx
  - stash + backup handling on checkout and switching
  - persistent snapshot folder protection for audio/MIDI
- Cleaned temp artifacts: `.dawgit_backups`, placeholder files, stashes, and test folders
- 🎼 Final app logic includes: 
  - 'Start New Version Line', 
  - 'Open in Ableton', 
  - safe snapshot switching,
  - user-friendly music-producer language
- 🧪 Pytest test suite covering UI, safety, edge cases, branching, commits, snapshots
- 🧹 Latest version (v1.1.2) includes real DAW test assets for regression tests (audio, MIDI, Logic & ALS files)

✅ Please continue development, fix bugs, or add features based on this. I'm resuming from where the last thread left off, starting on `feature/pages-ui-navigation`.
